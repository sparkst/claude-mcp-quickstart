{
  "cli": {
    "version": {
      "median": 37.569500000000005,
      "measurements": [
        36.963167,
        37.191374999999994,
        37.569500000000005,
        38.01641600000002,
        38.470082999999995
      ],
      "baseline": {
        "target": 200,
        "regression": 300
      },
      "status": "excellent"
    },
    "help": {
      "median": 37.00845800000002,
      "measurements": [
        36.68629199999998,
        36.86729200000002,
        37.00845800000002,
        37.01133299999998,
        37.644499999999994
      ],
      "baseline": {
        "target": 250,
        "regression": 400
      },
      "status": "excellent"
    }
  },
  "tests": {
    "unit": {
      "duration": 10000,
      "error": "Command failed: npm test -- --testTimeout=30000\n- Waiting for Claude to connect...\n✔ Claude connected!\nstderr | brain-connection.spec.js > initiateBrainConnection > REQ-201 — prevents exceptions from crashing parent process\nError during brain connection: Disk full\n\nstderr | setup.spec.js > loadExistingConfig > returns default config when JSON is invalid\nInvalid JSON in config file: Unexpected token 'i', \"invalid json\" is not valid JSON\n\n⎯⎯⎯⎯⎯⎯ Failed Tests 54 ⎯⎯⎯⎯⎯⎯⎯\n\n FAIL  cli-security.spec.js > CLI Security Tests > REQ-SEC-001: Command Allowlisting Security > REQ-SEC-001 — only predefined commands are processed by CLI\nAssertionError: expected [Function] to not throw an error but 'TypeError: Cannot read properties of …' was thrown\n\n- Expected: \nundefined\n\n+ Received: \n\"TypeError: Cannot read properties of undefined (reading 'find')\"\n\n ❯ cli-security.spec.js:50:16\n     48|           );\n     49|           expect(commandObj).toBeDefined();\n     50|         }).not.toThrow();\n       |                ^\n     51|       }\n     52|     });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/54]⎯\n\n FAIL  cli-security.spec.js > CLI Security Tests > REQ-SEC-001: Command Allowlisting Security > REQ-SEC-001 — unknown commands are rejected immediately\nAssertionError: expected [Function] to throw error matching /Unknown command:/ but got 'program.emit is not a function'\n\n- Expected: \n/Unknown command:/\n\n+ Received: \n\"program.emit is not a function\"\n\n ❯ cli-security.spec.js:70:12\n     68|           // Trigger unknown command handler\n     69|           program.emit(\"command:*\", [maliciousCommand]);\n     70|         }).toThrow(/Unknown command:/);\n       |            ^\n     71|       }\n     72|     });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/54]⎯\n\n FAIL  cli-security.spec.js > CLI Security Tests > REQ-SEC-002: Input Sanitization and Validation > REQ-SEC-002 — script injection attempts are properly sanitized\nAssertionError: expected 'program.emit is not a function' to contain '&lt;'\n\n- Expected\n+ Received\n\n- &lt;\n+ program.emit is not a function\n\n ❯ cli-security.spec.js:104:35\n    102|           // Should contain escaped versions\n    103|           if (injection.includes(\"<script>\")) {\n    104|             expect(error.message).toContain(\"&lt;\");\n       |                                   ^\n    105|             expect(error.message).toContain(\"&gt;\");\n    106|           }\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/54]⎯\n\n FAIL  cli-security.spec.js > CLI Security Tests > REQ-SEC-002: Input Sanitization and Validation > REQ-SEC-002 — HTML entity encoding prevents injection\nAssertionError: expected 'program.emit is not a function' to contain '&'\n\n- Expected\n+ Received\n\n- &\n+ program.emit is not a function\n\n ❯ cli-security.spec.js:135:33\n    133| \n    134|           // Should contain encoded versions (but entities may be furt…\n    135|           expect(error.message).toContain(\"&\");\n       |                                 ^\n    136|         }\n    137|       }\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/54]⎯\n\n FAIL  cli-security.spec.js > CLI Security Tests > REQ-SEC-002: Input Sanitization and Validation > REQ-SEC-002 — input length is limited to prevent excessive output\nTypeError: actual value must be number or bigint, received \"undefined\"\n ❯ cli-security.spec.js:153:42\n    151|           /Unknown command: (.+)/\n    152|         )?.[1];\n    153|         expect(commandInMessage?.length).toBeLessThanOrEqual(52); // \"…\n       |                                          ^\n    154|       }\n    155|     });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/54]⎯\n\n FAIL  cli-security.spec.js > CLI Security Tests > REQ-SEC-003: Information Disclosure Prevention > REQ-SEC-003 — error messages don't reveal internal command structure\nAssertionError: expected \"error\" to be called with arguments: [ StringMatching{…} ]\n\nReceived: \n\n\n\nNumber of calls: 0\n\n ❯ cli-security.spec.js:167:33\n    165|       } catch (error) {\n    166|         // Should not contain detailed command listing\n    167|         expect(consoleErrorSpy).toHaveBeenCalledWith(\n       |                                 ^\n    168|           expect.stringMatching(\n    169|             /❌ Invalid command: \"unknown\\[CHAR45\\]command\"/\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/54]⎯\n\n FAIL  cli-security.spec.js > CLI Security Tests > REQ-SEC-003: Information Disclosure Prevention > REQ-SEC-003 — help system only available through explicit flag\nAssertionError: expected \"log\" to be called with arguments: [ StringMatching /Use --help/ ]\n\nReceived: \n\n\n\nNumber of calls: 0\n\n ❯ cli-security.spec.js:195:28\n    193|       } catch (error) {\n    194|         // Should only show minimal help reference\n    195|         expect(consoleSpy).toHaveBeenCalledWith(\n       |                            ^\n    196|           expect.stringMatching(/Use --help/)\n    197|         );\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/54]⎯\n\n FAIL  cli-security.spec.js > CLI Security Tests > REQ-SEC-003: Information Disclosure Prevention > REQ-SEC-003 — security events are logged for monitoring\nTypeError: program.emit is not a function\n ❯ cli-security.spec.js:220:17\n    218|         const exitSpy = vi.spyOn(process, \"exit\").mockImplementation((…\n    219| \n    220|         program.emit(\"command:*\", [\"malicious-command\"]);\n       |                 ^\n    221| \n    222|         // Should log security event\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/54]⎯\n\n FAIL  cli-security.spec.js > CLI Security Tests > REQ-SEC-004: Secure Default Behaviors > REQ-SEC-004 — clean exit with appropriate error codes\nTypeError: program.emit is not a function\n ❯ cli-security.spec.js:243:17\n    241|         const exitSpy = vi.spyOn(process, \"exit\").mockImplementation((…\n    242| \n    243|         program.emit(\"command:*\", [\"unknown\"]);\n       |                 ^\n    244| \n    245|         // Should exit with error code 1\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/54]⎯\n\n FAIL  cli-security.spec.js > CLI Security Tests > REQ-SEC-004: Secure Default Behaviors > REQ-SEC-004 — proper handling of test vs production environments\nAssertionError: expected [Function] to throw error matching /Unknown command:/ but got 'program.emit is not a function'\n\n- Expected: \n/Unknown command:/\n\n+ Received: \n\"program.emit is not a function\"\n\n ❯ cli-security.spec.js:261:10\n    259|       expect(() => {\n    260|         program.emit(\"command:*\", [\"test-command\"]);\n    261|       }).toThrow(/Unknown command:/);\n       |          ^\n    262| \n    263|       // Production should exit (tested above)\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/54]⎯\n\n FAIL  cli-security.spec.js > CLI Security Tests > REQ-SEC-005: Command Injection Prevention > REQ-SEC-005 — shell metacharacters are properly escaped\nAssertionError: expected 'program.emit is not a function' to contain '[DOLLAR]'\n\n- Expected\n+ Received\n\n- [DOLLAR]\n+ program.emit is not a function\n\n ❯ cli-security.spec.js:311:35\n    309|           // Should contain escaped versions\n    310|           if (metachar.includes(\"$(\")) {\n    311|             expect(error.message).toContain(\"[DOLLAR]\");\n       |                                   ^\n    312|             expect(error.message).toContain(\"[LPAREN]\");\n    313|           }\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/54]⎯\n\n FAIL  cli-security.spec.js > CLI Security Tests > REQ-SEC-005: Command Injection Prevention > REQ-SEC-005 — path traversal attempts are blocked\nAssertionError: expected 'program.emit is not a function' to contain '[DOTDOT]'\n\n- Expected\n+ Received\n\n- [DOTDOT]\n+ program.emit is not a function\n\n ❯ cli-security.spec.js:370:35\n    368|           // Only check for escaped dots if path contains them\n    369|           if (path.includes(\"..\")) {\n    370|             expect(error.message).toContain(\"[DOTDOT]\"); // Escaped do…\n       |                                   ^\n    371|           }\n    372|         }\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[12/54]⎯\n\n FAIL  cli-security.spec.js > CLI Security Tests > Edge Cases and Boundary Conditions > handles null and undefined operands safely\nAssertionError: expected [Function] to throw error matching /Unknown command: \\[invalid-input\\]/ but got 'program.emit is not a function'\n\n- Expected: \n/Unknown command: \\[invalid-input\\]/\n\n+ Received: \n\"program.emit is not a function\"\n\n ❯ cli-security.spec.js:385:10\n    383|       expect(() => {\n    384|         program.emit(\"command:*\", [null]);\n    385|       }).toThrow(/Unknown command: \\[invalid-input\\]/);\n       |          ^\n    386| \n    387|       // Test undefined operands\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[13/54]⎯\n\n FAIL  cli-security.spec.js > CLI Security Tests > Edge Cases and Boundary Conditions > handles non-string inputs safely\nAssertionError: expected [Function] to throw error matching /Unknown command: \\[invalid-input\\]/ but got 'program.emit is not a function'\n\n- Expected: \n/Unknown command: \\[invalid-input\\]/\n\n+ Received: \n\"program.emit is not a function\"\n\n ❯ cli-security.spec.js:413:12\n    411|         expect(() => {\n    412|           program.emit(\"command:*\", [input]);\n    413|         }).toThrow(/Unknown command: \\[invalid-input\\]/);\n       |            ^\n    414|       }\n    415|     });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[14/54]⎯\n\n FAIL  dev-mode-deprecation.spec.js > REQ-005: Dev-Mode Deprecation Descriptions > REQ-005.1 — includes GitHub deprecation notice in server descriptions\nAssertionError: expected '# Claude MCP Workspace Context\\n\\n## …' to contain 'github'\n\n- Expected\n+ Received\n\n- github\n+ # Claude MCP Workspace Context\n+\n+ ## Project Information\n+ - **Path**: /test/project\n+ - **Type**: Rust\n+ - **MCP Config**: /Users/travis/Library/Application Support/Claude/claude_desktop_config.json\n+ - **Setup Date**: 2025-09-15T01:30:58.394Z\n+\n+ ## Available MCP Tools\n+\n+\n+ ## Key Directories\n+ - Unable to read directory structure\n+\n+ ## Development Patterns\n+ - This is a Rust project with MCP integration\n+ - Claude has access to enhanced capabilities via MCP servers\n+ - Use memory MCP to persist important project context\n+ - Use search MCPs for research and documentation lookup\n+\n+ ## Quick Commands\n+ - \"Save this to memory: [important info]\"\n+ - \"Search for documentation on [topic]\"\n+ - \"Help me understand this project structure\"\n+ - \"Research best practices for [technology]\"\n+\n\n ❯ dev-mode-deprecation.spec.js:59:28\n     57|     const contextContent = contextCall[1];\n     58| \n     59|     expect(contextContent).toContain(\"github\");\n       |                            ^\n     60|     expect(contextContent).toContain(\"deprecated\");\n     61|     expect(contextContent).toContain(\"Claude Settings → Connectors → G…\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[15/54]⎯\n\n FAIL  dev-mode-deprecation.spec.js > REQ-005: Dev-Mode Deprecation Descriptions > REQ-005.2 — includes filesystem deprecation notice in server descriptions\nAssertionError: expected '# Claude MCP Workspace Context\\n\\n## …' to contain 'filesystem'\n\n- Expected\n+ Received\n\n- filesystem\n+ # Claude MCP Workspace Context\n+\n+ ## Project Information\n+ - **Path**: /test/project\n+ - **Type**: Rust\n+ - **MCP Config**: /Users/travis/Library/Application Support/Claude/claude_desktop_config.json\n+ - **Setup Date**: 2025-09-15T01:30:58.394Z\n+\n+ ## Available MCP Tools\n+\n+\n+ ## Key Directories\n+ - Unable to read directory structure\n+\n+ ## Development Patterns\n+ - This is a Rust project with MCP integration\n+ - Claude has access to enhanced capabilities via MCP servers\n+ - Use memory MCP to persist important project context\n+ - Use search MCPs for research and documentation lookup\n+\n+ ## Quick Commands\n+ - \"Save this to memory: [important info]\"\n+ - \"Search for documentation on [topic]\"\n+ - \"Help me understand this project structure\"\n+ - \"Research best practices for [technology]\"\n+\n\n ❯ dev-mode-deprecation.spec.js:93:28\n     91|     const contextContent = contextCall[1];\n     92| \n     93|     expect(contextContent).toContain(\"filesystem\");\n       |                            ^\n     94|     expect(contextContent).toContain(\"deprecated\");\n     95|     expect(contextContent).toContain(\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[16/54]⎯\n\n FAIL  dev-mode-deprecation.spec.js > REQ-005: Dev-Mode Deprecation Descriptions > REQ-005.3 — includes Context7 deprecation notice in server descriptions\nAssertionError: expected '# Claude MCP Workspace Context\\n\\n## …' to contain 'context7'\n\n- Expected\n+ Received\n\n- context7\n+ # Claude MCP Workspace Context\n+\n+ ## Project Information\n+ - **Path**: /test/project\n+ - **Type**: Rust\n+ - **MCP Config**: /Users/travis/Library/Application Support/Claude/claude_desktop_config.json\n+ - **Setup Date**: 2025-09-15T01:30:58.394Z\n+\n+ ## Available MCP Tools\n+\n+\n+ ## Key Directories\n+ - Unable to read directory structure\n+\n+ ## Development Patterns\n+ - This is a Rust project with MCP integration\n+ - Claude has access to enhanced capabilities via MCP servers\n+ - Use memory MCP to persist important project context\n+ - Use search MCPs for research and documentation lookup\n+\n+ ## Quick Commands\n+ - \"Save this to memory: [important info]\"\n+ - \"Search for documentation on [topic]\"\n+ - \"Help me understand this project structure\"\n+ - \"Research best practices for [technology]\"\n+\n\n ❯ dev-mode-deprecation.spec.js:129:28\n    127|     const contextContent = contextCall[1];\n    128| \n    129|     expect(contextContent).toContain(\"context7\");\n       |                            ^\n    130|     expect(contextContent).toContain(\"deprecated\");\n    131|     expect(contextContent).toContain(\"Claude Settings → Extensions\");\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[17/54]⎯\n\n FAIL  dev-mode.spec.js > dev-mode > generateClaudeIntegration > REQ-101 — generates workspace context files for React project\nAssertionError: expected \"undefined\" to be called 2 times, but got 0 times\n ❯ dev-mode.spec.js:77:28\n     75|       expect(result).toHaveProperty(\"promptPath\");\n     76|       expect(result).toHaveProperty(\"contextPath\");\n     77|       expect(fs.writeFile).toHaveBeenCalledTimes(2);\n       |                            ^\n     78| \n     79|       const contextCall = vi\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[18/54]⎯\n\n FAIL  dev-mode.spec.js > dev-mode > generateClaudeIntegration > REQ-102 — detects project type from package.json dependencies\nTypeError: Cannot read properties of undefined (reading '1')\n ❯ dev-mode.spec.js:113:27\n    111|           .mocked(fs.writeFile)\n    112|           .mock.calls.find((call) => call[0].includes(\".claude-context…\n    113|         expect(contextCall[1]).toContain(testCase.expected);\n       |                           ^\n    114| \n    115|         vi.clearAllMocks();\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[19/54]⎯\n\n FAIL  dev-mode.spec.js > dev-mode > generateClaudeIntegration > REQ-103 — handles missing package.json by checking other file types\nAssertionError: expected \"undefined\" to be called with arguments: [ …(2) ]\n\nReceived: \n\n\n\nNumber of calls: 0\n\n ❯ dev-mode.spec.js:133:28\n    131|       await generateClaudeIntegration();\n    132| \n    133|       expect(fs.writeFile).toHaveBeenCalledWith(\n       |                            ^\n    134|         \"/test/project/.claude-context\",\n    135|         expect.stringContaining(\"Rust\")\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[20/54]⎯\n\n FAIL  dev-mode.spec.js > dev-mode > generateClaudeIntegration > REQ-105 — limits config file size to prevent memory exhaustion\nAssertionError: expected \"spy\" to be called with arguments: [ StringContaining{…} ]\n\nReceived: \n\n  1st spy call:\n\n  Array [\n-   StringContaining \"Could not read MCP config\",\n+   undefined,\n  ]\n\n  2nd spy call:\n\n  Array [\n-   StringContaining \"Could not read MCP config\",\n+   undefined,\n  ]\n\n\nNumber of calls: 2\n\n ❯ dev-mode.spec.js:163:28\n    161|       await generateClaudeIntegration();\n    162| \n    163|       expect(console.warn).toHaveBeenCalledWith(\n       |                            ^\n    164|         expect.stringContaining(\"Could not read MCP config\")\n    165|       );\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[21/54]⎯\n\n FAIL  dev-mode.spec.js > dev-mode > generateClaudeIntegration > REQ-106 — gracefully handles directory read errors\nAssertionError: expected \"spy\" to be called with arguments: [ StringContaining{…} ]\n\nReceived: \n\n  1st spy call:\n\n  Array [\n-   StringContaining \"Could not read directory structure\",\n+   undefined,\n  ]\n\n  2nd spy call:\n\n  Array [\n-   StringContaining \"Could not read directory structure\",\n+   undefined,\n  ]\n\n\nNumber of calls: 2\n\n ❯ dev-mode.spec.js:185:28\n    183|       await generateClaudeIntegration();\n    184| \n    185|       expect(console.warn).toHaveBeenCalledWith(\n       |                            ^\n    186|         expect.stringContaining(\"Could not read directory structure\")\n    187|       );\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[22/54]⎯\n\n FAIL  dev-mode.spec.js > dev-mode > generateClaudeIntegration > REQ-107 — includes MCP server descriptions in generated prompt\nTypeError: Cannot read properties of undefined (reading '1')\n ❯ dev-mode.spec.js:223:41\n    221|         .mocked(fs.writeFile)\n    222|         .mock.calls.find((call) => call[0].includes(\".claude-context\")…\n    223|       const contextContent = contextCall[1];\n       |                                         ^\n    224| \n    225|       expect(contextContent).toContain(\"Save and recall project contex…\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[23/54]⎯\n\n FAIL  dev-mode.spec.js > dev-mode > generateClaudeIntegration > REQ-108 — handles empty MCP configuration gracefully\nTypeError: Cannot read properties of undefined (reading '1')\n ❯ dev-mode.spec.js:253:39\n    251|         .mocked(fs.writeFile)\n    252|         .mock.calls.find((call) => call[0].includes(\".claude-integrati…\n    253|       const promptContent = promptCall[1];\n       |                                       ^\n    254| \n    255|       expect(promptContent).toContain(\"No MCP servers detected\");\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[24/54]⎯\n\n FAIL  p0-critical-fixes.spec.js > P0 Critical Issues - Failing Tests > REQ-202: Template Injection Vulnerability > REQ-202 — formatServerList and formatServerListForJSON prevent script injection\nAssertionError: expected '# 🧠 Claude Brain Connection\\n\\nHi Cl…' to contain 'javascript&#x3A;alert(\\'xss\\')'\n\n- Expected\n+ Received\n\n- javascript&#x3A;alert('xss')\n+ # 🧠 Claude Brain Connection\n+\n+ Hi Claude! Your MCP workspace is ready. Setup verification complete!\n+\n+ ## 📁 Workspace Context\n+ - **Project Directory**: `/format-test`\n+ - **Project Type**: Vue.js\n+ - **MCP Configuration**: `/Users/travis/Library/Application Support/Claude/claude_desktop_config.json`\n+\n+ ## ✅ Setup Verification Complete\n+\n+ Your Claude MCP setup is working correctly!\n+\n+ **Configuration Summary:**\n+ - 📁 Filesystem Access: ❌ Not Enabled\n+ - 🏠 Workspace Configured: ❌ No\n+ - 📂 Current Project Included: ❌ No\n+ - 🔧 Total MCP Servers: 0\n+ - 📚 Context7: ⚠️ Recommended\n+ - 🐙 GitHub: ⚠️ Recommended\n+\n+\n+ ## 🧠 Save This Context to Memory\n+ Use your memory to save:\n+ ```\n+ Primary workspace: /format-test\n+ Project type: Vue.js\n+ Available MCP tools: \"memory\", \"&lt;&#x2F;script&gt;&lt;script&gt;malicious()&lt;&#x2F;script&gt;\", \"supabase\", \"javascript&#x3A;alert(&#x27;xss&#x27;)\"\n+ Available capabilities: 0/0\n+ Context file: .claude-context (in project root)\n+ Last verified: 2025-09-15T01:30:58.452Z\n+ ```\n+\n+ ## 🚀 10 Things You Can Do Right Now\n+\n+\n+\n+ ## ⚡ 10 New Capabilities Unlocked by MCP\n+\n+\n+\n+ **Capabilities Active: 0/0**\n+\n+\n+\n+ ## ⚠️ IMPORTANT: Confirm Connection\n+ When you've successfully loaded this workspace and verified your MCP tools are working, please create a status file to confirm the connection:\n+\n+ **File locations for reference:**\n+ - Connection prompt: `/format-test/connect_claude_brain.md`\n+ - Status file to create: `/format-test/claude_brain_connected.json`\n+\n+ **Create file:** `claude_brain_connected.json`\n+ **Content:**\n+ ```json\n+ {\n+   \"status\": \"connected\",\n+   \"timestamp\": \"2025-09-15T01:30:58.452Z\",\n+   \"mcp_servers_verified\": [\"memory\", \"&lt;&#x2F;script&gt;&lt;script&gt;malicious()&lt;&#x2F;script&gt;\", \"supabase\", \"javascript&#x3A;alert(&#x27;xss&#x27;)\"],\n+   \"workspace_loaded\": true,\n+   \"next_steps\": \"I've successfully connected to your MCP workspace! I can help with 0 enhanced capabilities out of 0 available. Try one of the 10 practical examples above to get started!\"\n+ }\n+ ```\n+\n+ Ready to unlock the full potential of MCP-enhanced development! 🎉\n\n ❯ p0-critical-fixes.spec.js:170:31\n    168|         \"&lt;&#x2F;script&gt;&lt;script&gt;malicious()&lt;&#x2F;script…\n    169|       );\n    170|       expect(capturedContent).toContain(\"javascript&#x3A;alert('xss')\"…\n       |                               ^\n    171|     });\n    172| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[25/54]⎯\n\n FAIL  package-validation.spec.js > REQ-311: Package Distribution Quality > REQ-311 — verifies published package contains all necessary files\nTypeError: actual value must be number or bigint, received \"undefined\"\n ❯ package-validation.spec.js:75:31\n     73|     expect(result.valid).toBe(true);\n     74|     expect(result.missingFiles).toHaveLength(0);\n     75|     expect(result.totalFiles).toBeGreaterThan(3);\n       |                               ^\n     76|   });\n     77| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[26/54]⎯\n\n FAIL  package-validation.spec.js > REQ-311: Package Distribution Quality > REQ-311 — prevents distribution when tests are not green\nAssertionError: expected true to be false // Object.is equality\n\n- Expected\n+ Received\n\n- false\n+ true\n\n ❯ package-validation.spec.js:84:41\n     82|     const distributionCheck = await checkPackageIntegrity();\n     83| \n     84|     expect(distributionCheck.testsPass).toBe(false);\n       |                                         ^\n     85|     expect(distributionCheck.ready).toBe(false);\n     86|     expect(distributionCheck.blockingIssues).toContain(\"failing tests\"…\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[27/54]⎯\n\n FAIL  package-validation.spec.js > REQ-313: Repository Maintenance > REQ-313 — removes all committed .tgz build artifacts\nAssertionError: expected 0 to be greater than 0\n ❯ package-validation.spec.js:100:44\n     98|     const cleanupResult = await cleanBuildArtifacts();\n     99| \n    100|     expect(cleanupResult.artifactsRemoved).toBeGreaterThan(0);\n       |                                            ^\n    101|     expect(cleanupResult.cleanupSuccess).toBe(true);\n    102|     expect(cleanupResult.removedFiles).toEqual(\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[28/54]⎯\n\n FAIL  package-validation.spec.js > REQ-313: Repository Maintenance > REQ-313 — verifies clean working tree after cleanup\nAssertionError: expected false to be true // Object.is equality\n\n- Expected\n+ Received\n\n- true\n+ false\n\n ❯ package-validation.spec.js:118:40\n    116|     const repoState = await validateRepositoryState();\n    117| \n    118|     expect(repoState.workingTreeClean).toBe(true);\n       |                                        ^\n    119|     expect(repoState.noUncommittedFiles).toBe(true);\n    120|     expect(repoState.noArtifactsPresent).toBe(true);\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[29/54]⎯\n\n FAIL  package-validation.spec.js > REQ-314: Package Files Validation > REQ-314 — checks for missing critical files before packaging\nAssertionError: expected { 'claude-mcp-quickstart': 'index.js' } to be true // Object.is equality\n\n- Expected: \ntrue\n\n+ Received: \nObject {\n  \"claude-mcp-quickstart\": \"index.js\",\n}\n\n ❯ package-validation.spec.js:166:50\n    164| \n    165|     expect(criticalCheck.criticalFilesMissing).toBe(false);\n    166|     expect(criticalCheck.hasRequiredEntryPoints).toBe(true);\n       |                                                  ^\n    167|     expect(criticalCheck.hasRequiredDocs).toBe(true);\n    168|   });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[30/54]⎯\n\n FAIL  package-validation.spec.js > REQ-314: Package Files Validation > REQ-314 — warns about common packaging mistakes\nError: Invalid Chai property: toHaveLength.greaterThan. See docs for proper usage of \"toHaveLength\".\n ❯ package-validation.spec.js:183:45\n    181|     const validation = await validatePackageFiles(packageWithMistakes);\n    182| \n    183|     expect(validation.warnings).toHaveLength.greaterThan(0);\n       |                                             ^\n    184|     expect(validation.warnings.some((w) => w.includes(\"node_modules\"))…\n    185|       true\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[31/54]⎯\n\n FAIL  packaging.spec.js > REQ-311: Package Distribution Integrity > REQ-311 — npm pack would include all required modules\nAssertionError: expected 'claude-mcp-quickstart-2.4.2.tgz\\n' to contain 'claude-mcp-quickstart-2.3.2.tgz'\n\n- Expected\n+ Received\n\n- claude-mcp-quickstart-2.3.2.tgz\n+ claude-mcp-quickstart-2.4.2.tgz\n+\n\n ❯ packaging.spec.js:89:31\n     87| \n     88|     expect(packResult.success).toBe(true);\n     89|     expect(packResult.stdout).toContain(\"claude-mcp-quickstart-2.3.2.t…\n       |                               ^\n     90|   });\n     91| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[32/54]⎯\n\n FAIL  setup-diagnostics-corrected.spec.js > REQ-201 - Correct Claude Desktop Architecture Understanding > REQ-201 - should only validate actual MCP servers through configuration\nAssertionError: expected {} to have property \"memory\"\n ❯ setup-diagnostics-corrected.spec.js:59:33\n     57| \n     58|     // Should only validate actual MCP servers\n     59|     expect(analysis.mcpServers).toHaveProperty(\"memory\");\n       |                                 ^\n     60|     expect(analysis.mcpServers).toHaveProperty(\"supabase\");\n     61|     expect(analysis.mcpServers).not.toHaveProperty(\"filesystem\");\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[33/54]⎯\n\n FAIL  setup-diagnostics-corrected.spec.js > REQ-204 - Revised MCP Server Validation > REQ-204 - should only validate actual MCP servers\nAssertionError: expected [] to include 'memory'\n ❯ setup-diagnostics-corrected.spec.js:241:41\n    239| \n    240|     // Should validate memory and supabase but NOT filesystem\n    241|     expect(validation.validatedServers).toContain(\"memory\");\n       |                                         ^\n    242|     expect(validation.validatedServers).toContain(\"supabase\");\n    243|     expect(validation.skippedServers).toContain(\"filesystem\");\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[34/54]⎯\n\n FAIL  setup-diagnostics-corrected.spec.js > REQ-204 - Revised MCP Server Validation > REQ-204 - should skip MCP validation for Filesystem, Context7, Github entirely\nAssertionError: expected [] to include 'filesystem'\n ❯ setup-diagnostics-corrected.spec.js:267:39\n    265|     const validation = await validateMcpServersOnly(\"/test/config.json…\n    266| \n    267|     expect(validation.skippedServers).toContain(\"filesystem\");\n       |                                       ^\n    268|     expect(validation.skippedServers).toContain(\"context7\");\n    269|     expect(validation.skippedServers).toContain(\"github\");\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[35/54]⎯\n\n FAIL  setup-diagnostics-corrected.spec.js > REQ-204 - Revised MCP Server Validation > REQ-204 - should maintain existing MCP validation logic for legitimate servers\nAssertionError: expected [] to include 'memory'\n ❯ setup-diagnostics-corrected.spec.js:289:41\n    287|     const validation = await validateMcpServersOnly(\"/test/config.json…\n    288| \n    289|     expect(validation.validatedServers).toContain(\"memory\");\n       |                                         ^\n    290|     expect(\n    291|       validation.issues.find((i) => i.server === \"invalid-server\")\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[36/54]⎯\n\n FAIL  setup-diagnostics-corrected.spec.js > REQ-206 - Backward Compatibility > REQ-206 - should continue to work with existing MCP server configurations\nAssertionError: expected undefined not to be undefined\n ❯ setup-diagnostics-corrected.spec.js:348:40\n    346| \n    347|     expect(analysis.success).toBe(true);\n    348|     expect(analysis.mcpServers.memory).toBeDefined();\n       |                                        ^\n    349|     expect(analysis.mcpServers.supabase).toBeDefined();\n    350|   });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[37/54]⎯\n\n FAIL  setup-diagnostics-corrected.spec.js > REQ-206 - Backward Compatibility > REQ-206 - should gracefully handle existing incorrect configurations\nAssertionError: expected undefined not to be undefined\n ❯ setup-diagnostics-corrected.spec.js:373:40\n    371|     // Should not error, should provide migration guidance\n    372|     expect(analysis.success).toBe(true);\n    373|     expect(analysis.migrationGuidance).toBeDefined();\n       |                                        ^\n    374|     expect(analysis.migrationGuidance.filesystem).toContain(\"built-in\"…\n    375|   });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[38/54]⎯\n\n FAIL  setup-diagnostics-corrected.spec.js > REQ-206 - Backward Compatibility > REQ-206 - should not introduce breaking changes to legitimate MCP validation\nTypeError: Cannot read properties of undefined (reading 'validated')\n ❯ setup-diagnostics-corrected.spec.js:393:39\n    391|     const analysis = await verifyClaudeSetup(\"/test/project\");\n    392| \n    393|     expect(analysis.mcpServers.memory.validated).toBe(true);\n       |                                       ^\n    394|     expect(analysis.mcpServers.memory.configuration.env.MEMORY_SIZE).t…\n    395|       \"1GB\"\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[39/54]⎯\n\n FAIL  tests/integration-req-101-108.spec.js > INTEGRATION TESTS: REQ-101 through REQ-108 Complete System > Complete Workflow Integration > REQ-101-108 — executes complete QNEW → QGIT workflow successfully\nAssertionError: expected false to be true // Object.is equality\n\n- Expected\n+ Received\n\n- true\n+ false\n\n ❯ tests/integration-req-101-108.spec.js:302:32\n    300|           await workflowCoordinator.executeWorkflow(testRequirements);\n    301| \n    302|         expect(result.success).toBe(true);\n       |                                ^\n    303|         expect(result.phases).toHaveLength(WORKFLOW_PHASES.length);\n    304|         expect(result.totalTime).toBeLessThan(\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[40/54]⎯\n\n FAIL  tests/integration-req-101-108.spec.js > INTEGRATION TESTS: REQ-101 through REQ-108 Complete System > Complete Workflow Integration > REQ-101-108 — agent handoffs occur within acceptable timeframes\nAssertionError: expected false to be true // Object.is equality\n\n- Expected\n+ Received\n\n- true\n+ false\n\n ❯ tests/integration-req-101-108.spec.js:320:30\n    318|       ]);\n    319| \n    320|       expect(result.success).toBe(true);\n       |                              ^\n    321| \n    322|       // Verify performance metrics are within acceptable ranges\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[41/54]⎯\n\n FAIL  tests/integration-req-101-108.spec.js > INTEGRATION TESTS: REQ-101 through REQ-108 Complete System > Complete Workflow Integration > REQ-101-108 — test-writer blocks implementation without failing tests\nAssertionError: expected 'TDD ENFORCEMENT: Cannot proceed to im…' to contain 'test-writer failed to create failing …'\n\n- Expected\n+ Received\n\n- test-writer failed to create failing tests\n+ TDD ENFORCEMENT: Cannot proceed to implementation without failing tests\n\n ❯ tests/integration-req-101-108.spec.js:344:28\n    342| \n    343|       expect(result.success).toBe(false);\n    344|       expect(result.error).toContain(\n       |                            ^\n    345|         \"test-writer failed to create failing tests\"\n    346|       );\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[42/54]⎯\n\n FAIL  tests/integration-req-101-108.spec.js > INTEGRATION TESTS: REQ-101 through REQ-108 Complete System > Agent Coordination Integration > REQ-103-105 — security-reviewer activates for auth/network/fs/templates changes\nAssertionError: expected false to be true // Object.is equality\n\n- Expected\n+ Received\n\n- true\n+ false\n\n ❯ tests/integration-req-101-108.spec.js:363:73\n    361|       ]);\n    362| \n    363|       expect(workflowCoordinator.activeAgents.has(\"security-reviewer\")…\n       |                                                                         ^\n    364|         true\n    365|       );\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[43/54]⎯\n\n FAIL  tests/integration-req-101-108.spec.js > INTEGRATION TESTS: REQ-101 through REQ-108 Complete System > Agent Coordination Integration > REQ-103-105 — PE-Reviewer always activates during QCHECK phase\nAssertionError: expected false to be true // Object.is equality\n\n- Expected\n+ Received\n\n- true\n+ false\n\n ❯ tests/integration-req-101-108.spec.js:376:67\n    374|       ]);\n    375| \n    376|       expect(workflowCoordinator.activeAgents.has(\"PE-Reviewer\")).toBe…\n       |                                                                   ^\n    377| \n    378|       // Verify PE-Reviewer activated during QCHECK\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[44/54]⎯\n\n FAIL  tests/integration-req-101-108.spec.js > INTEGRATION TESTS: REQ-101 through REQ-108 Complete System > Agent Coordination Integration > REQ-103-105 — debugger activates only when tests fail after implementation\nAssertionError: expected false to be true // Object.is equality\n\n- Expected\n+ Received\n\n- true\n+ false\n\n ❯ tests/integration-req-101-108.spec.js:400:64\n    398|       ]);\n    399| \n    400|       expect(workflowCoordinator.activeAgents.has(\"debugger\")).toBe(tr…\n       |                                                                ^\n    401|     });\n    402|   });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[45/54]⎯\n\n FAIL  tests/integration-req-101-108.spec.js > INTEGRATION TESTS: REQ-101 through REQ-108 Complete System > Requirements Lock Integration > REQ-102-103 — requirements.lock.md snapshot created during QNEW phase\nAssertionError: expected undefined not to be undefined\n ❯ tests/integration-req-101-108.spec.js:415:36\n    413|       const docsWriterActivation =\n    414|         workflowCoordinator.activeAgents.get(\"docs-writer\");\n    415|       expect(docsWriterActivation).toBeDefined();\n       |                                    ^\n    416|       expect(docsWriterActivation.context.action).toBe(\"snapshot-requi…\n    417| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[46/54]⎯\n\n FAIL  tests/integration-req-101-108.spec.js > INTEGRATION TESTS: REQ-101 through REQ-108 Complete System > Performance and Stress Testing > REQ-101-108 — system handles multiple concurrent workflows\nAssertionError: expected false to be true // Object.is equality\n\n- Expected\n+ Received\n\n- true\n+ false\n\n ❯ tests/integration-req-101-108.spec.js:469:49\n    467| \n    468|         // Verify all workflows completed successfully\n    469|         expect(results.every((r) => r.success)).toBe(true);\n       |                                                 ^\n    470| \n    471|         // Verify performance didn't degrade significantly under load\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[47/54]⎯\n\n FAIL  tests/integration-req-101-108.spec.js > INTEGRATION TESTS: REQ-101 through REQ-108 Complete System > Performance and Stress Testing > REQ-101-108 — system maintains performance under stress\nAssertionError: expected 0 to be greater than 0.8\n ❯ tests/integration-req-101-108.spec.js:496:27\n    494|         stressTestResults.filter((r) => r.success).length /\n    495|         stressTestResults.length;\n    496|       expect(successRate).toBeGreaterThan(0.8); // 80% success rate mi…\n       |                           ^\n    497| \n    498|       // Verify performance degradation is minimal\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[48/54]⎯\n\n FAIL  tests/integration-req-101-108.spec.js > INTEGRATION TESTS: REQ-101 through REQ-108 Complete System > Error Boundary Integration > REQ-101-108 — system gracefully handles agent failures\nAssertionError: expected 'TDD ENFORCEMENT: Cannot proceed to im…' to contain 'PE-Reviewer agent failed'\n\n- Expected\n+ Received\n\n- PE-Reviewer agent failed\n+ TDD ENFORCEMENT: Cannot proceed to implementation without failing tests\n\n ❯ tests/integration-req-101-108.spec.js:528:28\n    526| \n    527|       expect(result.success).toBe(false);\n    528|       expect(result.error).toContain(\"PE-Reviewer agent failed\");\n       |                            ^\n    529|       expect(workflowCoordinator.errors.length).toBeGreaterThan(0);\n    530|     });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[49/54]⎯\n\n FAIL  tests/integration-req-101-108.spec.js > INTEGRATION TESTS: REQ-101 through REQ-108 Complete System > Error Boundary Integration > REQ-101-108 — system recovers from transient failures\nAssertionError: expected false to be true // Object.is equality\n\n- Expected\n+ Received\n\n- true\n+ false\n\n ❯ tests/integration-req-101-108.spec.js:556:30\n    554|       }\n    555| \n    556|       expect(result.success).toBe(true);\n       |                              ^\n    557|     });\n    558|   });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[50/54]⎯\n\n FAIL  tests/integration-req-101-108.spec.js > INTEGRATION TESTS: REQ-101 through REQ-108 Complete System > Complete System Validation > REQ-101-108 — all requirements integrate successfully when implemented\nAssertionError: expected 62.5 to be greater than 95\n ❯ tests/integration-req-101-108.spec.js:566:51\n    564| \n    565|       expect(integrationReport.totalRequirements).toBe(8);\n    566|       expect(integrationReport.integrationHealth).toBeGreaterThan(95);…\n       |                                                   ^\n    567| \n    568|       // Verify all critical requirements are implemented\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[51/54]⎯\n\n FAIL  tests/integration-req-101-108.spec.js > INTEGRATION TESTS: REQ-101 through REQ-108 Complete System > Complete System Validation > REQ-101-108 — complete workflow produces expected artifacts\nAssertionError: expected false to be true // Object.is equality\n\n- Expected\n+ Received\n\n- true\n+ false\n\n ❯ tests/integration-req-101-108.spec.js:596:30\n    594|       ]);\n    595| \n    596|       expect(result.success).toBe(true);\n       |                              ^\n    597| \n    598|       // Verify all expected workflow artifacts were created/updated\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[52/54]⎯\n\n FAIL  tests/integration-req-101-108.spec.js > INTEGRATION TESTS: REQ-101 through REQ-108 Complete System > Security Integration Validation > REQ-105 — security-reviewer integration with all workflow phases\nAssertionError: expected false to be true // Object.is equality\n\n- Expected\n+ Received\n\n- true\n+ false\n\n ❯ tests/integration-req-101-108.spec.js:638:35\n    636|         const hasSecurityReview =\n    637|           coordinator.activeAgents.has(\"security-reviewer\");\n    638|         expect(hasSecurityReview).toBe(scenario.expectReview);\n       |                                   ^\n    639|       }\n    640|     });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[53/54]⎯\n\n FAIL  tests/integration-req-101-108.spec.js > Performance Baseline Integration > REQ-101-108 — establishes performance baselines for future regression testing\nAssertionError: expected +0 to be 5 // Object.is equality\n\n- Expected\n+ Received\n\n- 5\n+ 0\n\n ❯ tests/integration-req-101-108.spec.js:676:35\n    674|     // Calculate baseline metrics\n    675|     const successfulRuns = performanceData.filter((d) => d.success);\n    676|     expect(successfulRuns.length).toBe(iterations);\n       |                                   ^\n    677| \n    678|     const avgTotalTime =\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[54/54]⎯\n\n",
      "status": "failed"
    },
    "package": {
      "duration": 15000,
      "error": "Command failed: npm test -- --testTimeout=5000 package-validation.spec.js\n⎯⎯⎯⎯⎯⎯⎯ Failed Tests 6 ⎯⎯⎯⎯⎯⎯⎯\n\n FAIL  package-validation.spec.js > REQ-311: Package Distribution Quality > REQ-311 — verifies published package contains all necessary files\nTypeError: actual value must be number or bigint, received \"undefined\"\n ❯ package-validation.spec.js:75:31\n     73|     expect(result.valid).toBe(true);\n     74|     expect(result.missingFiles).toHaveLength(0);\n     75|     expect(result.totalFiles).toBeGreaterThan(3);\n       |                               ^\n     76|   });\n     77| \n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/6]⎯\n\n FAIL  package-validation.spec.js > REQ-311: Package Distribution Quality > REQ-311 — prevents distribution when tests are not green\nAssertionError: expected true to be false // Object.is equality\n\n- Expected\n+ Received\n\n- false\n+ true\n\n ❯ package-validation.spec.js:84:41\n     82|     const distributionCheck = await checkPackageIntegrity();\n     83| \n     84|     expect(distributionCheck.testsPass).toBe(false);\n       |                                         ^\n     85|     expect(distributionCheck.ready).toBe(false);\n     86|     expect(distributionCheck.blockingIssues).toContain(\"failing tests\"…\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/6]⎯\n\n FAIL  package-validation.spec.js > REQ-313: Repository Maintenance > REQ-313 — removes all committed .tgz build artifacts\nAssertionError: expected 0 to be greater than 0\n ❯ package-validation.spec.js:100:44\n     98|     const cleanupResult = await cleanBuildArtifacts();\n     99| \n    100|     expect(cleanupResult.artifactsRemoved).toBeGreaterThan(0);\n       |                                            ^\n    101|     expect(cleanupResult.cleanupSuccess).toBe(true);\n    102|     expect(cleanupResult.removedFiles).toEqual(\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/6]⎯\n\n FAIL  package-validation.spec.js > REQ-313: Repository Maintenance > REQ-313 — verifies clean working tree after cleanup\nAssertionError: expected false to be true // Object.is equality\n\n- Expected\n+ Received\n\n- true\n+ false\n\n ❯ package-validation.spec.js:118:40\n    116|     const repoState = await validateRepositoryState();\n    117| \n    118|     expect(repoState.workingTreeClean).toBe(true);\n       |                                        ^\n    119|     expect(repoState.noUncommittedFiles).toBe(true);\n    120|     expect(repoState.noArtifactsPresent).toBe(true);\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/6]⎯\n\n FAIL  package-validation.spec.js > REQ-314: Package Files Validation > REQ-314 — checks for missing critical files before packaging\nAssertionError: expected { 'claude-mcp-quickstart': 'index.js' } to be true // Object.is equality\n\n- Expected: \ntrue\n\n+ Received: \nObject {\n  \"claude-mcp-quickstart\": \"index.js\",\n}\n\n ❯ package-validation.spec.js:166:50\n    164| \n    165|     expect(criticalCheck.criticalFilesMissing).toBe(false);\n    166|     expect(criticalCheck.hasRequiredEntryPoints).toBe(true);\n       |                                                  ^\n    167|     expect(criticalCheck.hasRequiredDocs).toBe(true);\n    168|   });\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/6]⎯\n\n FAIL  package-validation.spec.js > REQ-314: Package Files Validation > REQ-314 — warns about common packaging mistakes\nError: Invalid Chai property: toHaveLength.greaterThan. See docs for proper usage of \"toHaveLength\".\n ❯ package-validation.spec.js:183:45\n    181|     const validation = await validatePackageFiles(packageWithMistakes);\n    182| \n    183|     expect(validation.warnings).toHaveLength.greaterThan(0);\n       |                                             ^\n    184|     expect(validation.warnings.some((w) => w.includes(\"node_modules\"))…\n    185|       true\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/6]⎯\n\n",
      "status": "failed"
    }
  },
  "memory": {
    "cliStartup": {
      "usage": 16384,
      "baseline": {
        "target": 52428800,
        "regression": 104857600
      },
      "status": "excellent"
    }
  },
  "agents": {},
  "summary": {
    "totalTests": 5,
    "excellentCount": 3,
    "acceptableCount": 0,
    "regressionCount": 0,
    "failedCount": 2,
    "overallStatus": "TESTS_FAILED",
    "timestamp": "2025-09-15T01:30:59.976Z"
  }
}